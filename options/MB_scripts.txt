<!--
 *
 * Проект:    MobileBalance
 * Описание:  Заметки для разработчиков по алгоритму взаимодействия расширения MobileBalance
 *            с JavaScript-скриптами для опроса страниц личных кабинетов провайдеров
 * Редакция:  2022.07.19
 *
-->

Примечания: 1. Скрипты можно дополнительно изучить на примере плагинов, входящих в состав расширения.
               Наборы файлов скриптов после установки расширения находятся в каталоге "providers" его
               файловой структуры.
               После установки расширения его файловая структура с каталогом "providers" располагается
               (для браузеров, в которых тестирование проводилось) по следующему пути:

               Chrome: "%LOCALAPPDATA%\Google\Chrome\User Data\Default\Extensions\
                         <ID_расширения>\<#_версии_расширения>\providers\"
               Yandex: "%LOCALAPPDATA%\Yandex\YandexBrowser\User Data\Default\Extensions\
                         <ID_расширения>\<#_версии_расширения>\providers\"
               Edge:   "%LOCALAPPDATA%\Microsoft\Edge\User Data\Default\Extensions\
                         <ID_расширения>\<#_версии_расширения>\providers\"
               где
               %LOCALAPPDATA%      - системная переменная пути к данным профиля пользователя.
                                     Чаще всего это маршрут: "C:\Users\<Имя_пользователя>\AppData\Local"
               ID_расширения       - символьная строка идентификатора расширения. Например,
                                     "oogdlalfhmhjbdbgefpgmdhmfnjnlggo". Указано в сведениях браузера о
                                     расширении, откуда его и следует взять
               #_версии_расширения - номер версии расширения. Формируется механизмом подписания пакета
                                     для установки при его формировании. Например, "0.0.1_0"
               Значения в угловых скобках <> должны быть замещены соответствующими наименованиями

            2. Следует обеспечить одинаковое написание для имени JSON-файла, его переменной технического
               имени "name" и первой части имен файлов скриптов (см. дополнительно информацию о структуре
               JSON-файла описания плагина).
            3. При написании и отладке собственных скриптов для плагинов будет востребована проверка их
               пошагового взаимодействия с расширением. Для упрощения задачи отладки скриптов в коде
               модуля опроса внесены команды точек останова ("debugger") в ключевых местах взаимодействия
               расширения со скриптом. Они будут срабатывать на странице проведения опроса при открытой
               (по F12) панели разработчика.
               Остановы предусмотрены перед внедрением скрипта на страницу провайдера и перед передачей
               скрипту сообщения с параметрами. Это даёт возможность успеть открыть панель разработчика
               на странице провайдера, убедиться что скрипт в неё был внедрён (скрипт следует искать в
               панели разработчика в подразделе "Context scripts"), открыть его текст и установить в
               необходимых местах точки останова для отладки скрипта на стороне страницы провайдера.


Алгоритм взаимодействия скриптов плагинов с расширением MobileBalance
=====================================================================
Скрипты плагинов провайдеров для расширения разрабатываются на JavaScript. Скрипты очень близки по
алгоритму работы к плагинам прототипа - автономной программы MobileBalance, но при этом имеют несколько
иную структуру и большую свободу в использовании современных языковых конструкций.

В зависимости от подхода к разработке, плагин расширения представляет собой один или более JS-файлов
скриптов с расширением ".js".

Алгоритм работы скрипта предполагает его внедрение в страницу личного кабинета провайдера. При загрузке
очередной страницы личного кабинета внедрённый скрипт плагина утрачивается и в страницу требуется внедрить
очередной JS-файл скрипта. Он может быть, как тем же самым, так и отдельным файлом из набора скриптов
плагина. Соответствие имени файла скрипта текущему этапу запроса указывается в настройках плагина провайдера
(см. описание переменных для JSON-файла настроек провайдера).

Количество этапов запроса получается равным количеству страниц, обновляемых кабинетом - от стартовой (для
ввода учётных данных) до страницы личного кабинета (с которой считываются необходимые данные). Расширение
контролирует обновление страницы личного кабинета и внедряет в неё очередной (или тот же самый) скрипт из
набора.

Стартовая страница личного кабинета провайдера определяется значением переменной "startUrl", описываемой в
JSON-файле настроек плагина провайдера.

Расширение передаёт и получает данные от скрипта, внедрённого на страницу кабинета, при помощи сообщений.
После успешного внедрения скрипта на стартовую страницу кабинета провайдера расширение направляет скрипту
сообщение со структурой формата, описанного ниже.

После передачи сообщения расширение ожидает обновления страницы кабинета провайдера, как результата работы
скрипта. Если в настройках плагина установлены параметры "respondTimeout" и "respondTimeoutValue"
(рекомендуется), то при отсутствии обновления страницы кабинета в пределах указанного времени расширение
прекратит цикл запроса по учётным данным текущей записи, инициирует выход из личного кабинета и перейдёт
к работе со следующей записью учётных данных из списка. Выход из кабинета инициируется расширением как
переход по URL из переменной "finishUrl", указанной в файле описания настроек плагина.
Отсутствие реакции опрашиваемой страницы рассматривается как проблема ввода переданных данных (сбой в
работе скрипта, неправильные значения логина / пароля, нерешённая капча, неработоспособность сайта провайдера
и прочее).
Текущая реализация расширения предполагает обработку одной страницы личного кабинета провайдера. Переход
между страницами (и, соответственно, их перезагрузка) вызовет утрату внедрённого скрипта. В результате
на такой странице не окажется механизмов обработки данных и ответа в адрес расширения. При отключённом или
не установленном значении параметра respondTimeout, вы получите эффект "зависания" опроса - расширение будет
ожидать ответ со страницы провайдера, а на странице не будет скрипта для его формирования.

В случае медленного обновления страниц личного кабинета провайдера возможно установить паузу для ожидания
завершения этого процесса. Иначе внедрение скрипта произойдёт на ещё не обновившуюся страницу кабинета и
после её обновления он будет утрачен. За паузу отвечают параметры "onUpdateDelay" и "onUpdateDelayValue"
в настройках плагина.

Формат структуры, передаваемой расширением в сообщении скрипту:
---------------------------------------------------------------
- для этапов "log", "pass" и "log&pass"
  { message: "MB_takeData",
    action: requestStage,
    login:  loginValue,
    passw:  passwValue
  }
- для этапа "polling"
  { message: "MB_takeData",
    login:  loginValue
  }

где 
requestStage - наименование текущего этапа запроса. Может иметь одно из следующих значений:
  - "log"      - этап ввода логина (номера) учётной записи,
  - "pass"     - этап ввода пароля,
  - "log&pass" - этап ввода логина и пароля учётной записи (в случае, если это выполняется на одной
                 странице),
  - "polling"  - этап считывания данных на странице кабинета
                 Назначение этапов запроса описывается в переменной "scriptActions" JSON-файла настроек
                 для провайдера.
                 Пример: "scriptActions": [ "log", "pass", "polling" ]
loginValue   - значение логина (номера) опрашиваемой учётной записи. Задаётся в записи учётных данных
               переменной "loginValue" *,
passwValue   - значение пароля для входа под опрашиваемой учётной записью. Задаётся в записи учётных
               данных переменной "passwValue" *.

* В подавляющем большинстве случаев указание параметров логина и пароля учётной записи проводится в
  соответствующей форме в настройках расширения. Поэтому понимание структуры хранения записи учётных
  данных не обязательно.


Скрипт обеспечивает прослушивание обращённых к странице сообщений. При приходе сообщения с описанной
выше структурой - принмает переданные с ним параметры и выполняет необходимые действия с их использованием.


Прослушивание сообщения в скрипте, оформленном в файлах по количеству этапов
============================================================================
Имя JSON-файла параметров:           MY_PROV.json
Последовательность этапов запроса:   "scriptActions": [ "login", "password", "polling" ]
Файлы скриптов:                      "scriptFiles": [ "MY_PROV1.js", "MY_PROV2.js", "MY_PROV3.js" ]


Скрипт "MY_PROV1.js" (этап ввода логина):
-----------------------------------------
chrome.runtime.onMessage.addListener( ( request, sender, sendResponse ) => {
  try {
    if ( request.message === "MB_takeData" ) {
      if ( /* проверка наличия полей ввода для логина */ ) {
// Выполнение действий по вводу логина (номера). После этого страница перезагрузится
// и этот экземпляр скрипта будет утрачен
      }
      else
        if ( /* проверка наличия полей ввода для пароля */ ) {
// Если на этапе ввода логина обнаружена форма ввода пароля, то направить
// расширению сообщение с командой пропустить следующий этап (ввод пароля)
          chrome.runtime.sendMessage( sender.id, { message: "MB_workTab_skipNextPhase" }, null );
// Выполнение действий по вводу пароля. После этого страница перезагрузится
// и этот экземпляр скрипта будет утрачен
        }
    }
    else return;
  }
  catch (err) {
    console.log( err );
    return;
  }
})

Скрипт "MY_PROV2.js" (этап ввода пароля):
-----------------------------------------
chrome.runtime.onMessage.addListener( ( request, sender, sendResponse ) => {
  try {
    if ( request.message === "MB_takeData" ) {
// Выполнение действий по вводу пароля. После этого страница перезагрузится
// и этот экземпляр скрипта будет утрачен
    }
    else return;
  }
  catch (err) {
    console.log( err );
    return;
  }
})

Скрипт "MY_PROV3.js" (этап считывания данных):
----------------------------------------------
let MBextentionId = undefined;
let MBResult = undefined;

chrome.runtime.onMessage.addListener( async function( request, sender, sendResponse ) {
  try {
    if ( request.message === "MB_takeData" ) {
// Сохраняем идентификатор расширения, чтобы после опроса направить ему сообщение с результатами
      MBextentionId = sender.id;
// Выполнение действий по получению необходимых данных. Это последний этап работы скрипта.
// После приёма ответа с результатами запроса от скрипта расширение инициирует переход по URL,
// указанному в переменной "finishUrl" JSON-файла настроек плагина провайдера.
    }
    else return;
  }
  catch (err) {
    console.log( err );
    return;
  }
// ... здесь код плагина для сбора нужных параметров и записи их в переменные структуры ответа ...
//
// При необходимости перейти в ходе работы плагина на другую страницу или обновить текущую,
// экземпляр скрипта, который это инициировал, будут утрачен. Для того, чтобы была возможность
// выполнять подобные действия и продолжить работу плагина, кроме сообщения расширению по пропуску
// следующего шага (см. выше) у плагина есть возможность запросить повтор текущего.

let errorText = 'Нужно перезагрузить страницу и повторить текущий шаг работы плагина';
chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_repeatCurrentPhase', error: errorText }, null );
window.location.reload(); // Перезагружаем страницу, текущий экземпляр скрипта и все переменные будут утрачены

// ... здесь код плагина для сбора нужных параметров и записи их в переменные структуры ответа ...

// Передаём результаты опроса расширению MobileBalance
chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_takeData', status: true,
                                             error: errorText, data: MBResult, null );

// ... здесь код плагина для корректного завершения сеанса работы в кабинете и выхода из него ...
})

Прослушивание сообщения в скрипте, оформленном в одном файле:
=============================================================
Имя JSON-файла параметров:           MY_PROV.json
Последовательность этапов запроса:   "scriptActions": [ "login", "password", "polling" ]
Файлы скриптов:                      "scriptFiles": [ "MY_PROV1.js", "MY_PROV1.js", "MY_PROV1.js" ]

let MBextentionId = undefined;
let MBResult = undefined;
let errorText = 'Текст ошибки, который будет передан расширению в составе сообщения';

chrome.runtime.onMessage.addListener( ( request, sender, sendResponse ) => {
  try {
   if ( request.message === "MB_takeData" ) {
     switch ( request.action ) {
       case "login": {
         if ( /* проверка наличия полей ввода для логина */ ) {
// Выполнение действий по вводу логина (номера). После этого страница перезагрузится
// и этот экземпляр скрипта будет утрачен
         }
         else
           if (/* проверка наличия полей ввода для пароля */ ) {
// Если на этапе ввода логина обнаружена форма ввода пароля, то направить
// расширению сообщение с командой пропустить следующий этап (ввод пароля)
              chrome.runtime.sendMessage( sender.id, { message: "MB_workTab_skipNextPhase" }, null );
// Выполнение действий по вводу пароля. После этого страница перезагрузится
// и этот экземпляр скрипта будет утрачен
           }
         break;
       }
       case "password": {
         if (/* проверка наличия полей ввода для пароля */ ) {
// Выполнение действий по вводу пароля. После этого страница перезагрузится
// и этот экземпляр скрипта будет утрачен
         break;
       }
       case "polling": {
// Сохраняем идентификатор расширения, чтобы после опроса направить ему сообщение с результатами
         MBextentionId = sender.id;
// Выполнение действий по получению необходимых данных. Это последний этап
// работы скрипта. После получения ответа расширение инициирует выход из кабинета
         break;
       }
     }
   }
   else return;
  }
  catch( err ) {
    console.log( err );
    return;
  }
})

// Передаём результаты опроса расширению MobileBalance
chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_takeData', status: true,
                                             error: errorText, data: MBResult, null );

// ... здесь код плагина для корректного завершения сеанса работы в кабинете и выхода из него ...



Выполнение скриптом действий на страницах аутентификации ("log", "pass", "log&pass") традиционно
приводит к обновлению страницы личного кабинета, которая даёт доступ к считыванию необходимых данных.
На этапе "polling" скрипт после сбора данных должен направить их расширению в сообщении вида:
                                                    -----------------------------------------

chrome.runtime.sendMessage( MBextentionId,
                            { message: "MB_workTab_takeData",
                              status:  requestStatus,
                              error:   requestError,
                              data:    MBResult
                            },
                            null );

где
MBextentionId - значение идентификатора расширения, ранее сохранённое на этапе приёма сообщения
                от расширения

Формат структуры, передаваемой скриптом в сообщении расширению:
---------------------------------------------------------------
{ message: "MB_workTab_takeData",
  status: requestStatus,
  error: requestError,
  data: MBResult
}

где
requestStatus - статус результата запроса (Boolean). Может принимать одно из двух значений:
  - true - данные успешно получены,
  - false - ошибка в ходе получения данных (полученный результат не будет сохранён в истории запросов)
requestError  - текст сообщения об ошибке. Отображается в консоли разработчика для анализа ошибки
                При requestStatus = true - пустая строка ( "" )
MBResult      - структура результатов запроса (см. ниже)


После приёма ответа с результатами запроса от скрипта расширение инициирует переход по URL, указанному
в переменной "finishUrl" JSON-файла настроек плагина провайдера.

Расширение ожидает получить результат запроса в структуре, представленной ниже. Допускается формировать
значения не для всех полей структуры. Такие поля при разборе ответа скрипта будут заполнены расширением
значениями по умолчанию.

Структура ответа скрипта, используемая расширением (= записи истории запросов в хранилище IndexedDB расширения)
--------------------------------------------------
{ QueryDateTime: 0,  // Date,    Дата и время запроса, первичный ключ (primary key)
                                 Формируется на стороне расширения
  PhoneNumber: "",   // String,  Номер учётной записи (логин), (индексируемое поле)
  Balance: 0.0,      // Double,  Текущий баланс 
  UserName: "",      // String,  ФИО пользователя
  SMS: 0,            // Integer, Кол-во оставшихся / потраченных СМС
  Minutes: 0,        // Integer, Кол-во оставшихся минут (изменено, в ответе 'Min')
  Internet: 0.0,     // Double,  Кол-во оставшегося / потраченного трафика (в Мб)
  TarifPlan: "",     // String,  Название тарифного плана
  BlockStatus: "",   // String,  Статус блокировки
  TurnOffStr: "",    // String,  Ожидаемая дата отключения
  LicSchet: "",      // String,  Лицевой счет
  BalDelta: 0.0,     // Double,  Разница от уменьшаемого - баланса предыдущего запроса
                                 Формируется на стороне расширения
  NoChangeDays: 0,   // Integer, Количество дней без изменения баланса
                                 Формируется на стороне расширения
  KreditLimit: 0.0,  // Double,  Кредитный лимит
  UslugiOn: "",      // String,  Информация о подключённых услугах
  Balance2: 0.0,     // Double,  Баланс 2
  Balance3: 0.0,     // Double,  Баланс 3
  AnyString: "",     // String,  Любая строка
  Warning: 0         // Integer, Есть изменения по сравнению с предыдущим запросом (добавлено в v1.0.11,
                     //          нужно только в записях хранилища IndexedDB, в ответе плагинов не используется)
                     //          Представляет собой набор флагов-уведомлений:                 0 ( 0000 0000 ) - нет изменений;
                     //           1 ( 0000 0001 ) - Баланс без изменений дольше, чем указано; 2 ( 0000 0010 ) - Изменился статус блокировки;
                     //           4 ( 0000 0100 ) - Изменился состав или стоимость услуг;     8 ( 0000 1000 ) - Изменился тариф
                     //          Используется при отображении статуса предыдущего запроса в списке popup-меню
}

Поля структуры ответа
  AnyString,
  KreditLimit,
  Balance2,
  Balance3
унаследованы из структуры автономной программы MobileBalance. Они существуют в структуре ответа, но
находятся под вопросом удаления из структуры записи, как неиспользуемые.

Технологическое поле статуса запроса Warning содержит набор флагов-признаков изменений по сравнению с предыдущим запросом.
Добавлено в v1.0.11 расширения. Нужно только в записях хранилища IndexedDB, в ответах плагинов не анализируется. Используется
при отображении статуса предыдущего запроса в списке popup-меню.

Дополнительную информацию по соответствию структур ответа и хранения данных расширения и автономной
программы MobileBalance см. в файле "vars.mjs" (подключаемый модуль JavaScript), размещённого в корневом
каталоге расширения.


Расширение, как выше уже было показано в примерах, может обрабатывать ещё два види сообщения от скриптов плагинов:
                                                                          ------------------
Запрос плагином пропуска следующего шага (этапа) по сценарию работы плагина:

chrome.runtime.sendMessage( MBextentionId,
                            { message: "MB_workTab_skipNextPhase" },
                            null );

Например, если плановые шаги работы плагина описаны как "log", "pass" и "polling" и на шаге "log" плагин направит расширению
сообщение с message: "MB_workTab_skipNextPhase", то расширение не будет инициировать следующий шаг сценария "pass", а запустит
сразу шаг "polling".

Запрос плагином повторного запуска текущего шага (этапа) по сценарию работы плагина:

chrome.runtime.sendMessage( MBextentionId,
                            { message: "MB_workTab_repeatCurrentPhase",
                              error:   requestError },
                            null );

где
requestError  - текст сообщения об ошибке. Отображается в консоли разработчика для анализа ошибки
                В данном случае это не стороко ошибка, сколько пояснение причины запроса повтора шага.
                Если в этом нет необходимости, то значение может быть просто пустой строкой ( "" )

Например, если плановые шаги работы плагина описаны как "log", "pass" и "polling" и на шаге "polling" плагин направит расширению
сообщение с message: "MB_workTab_repeatCurrentPhase", то расширение повторно инициирует шаг "polling" плагина.
