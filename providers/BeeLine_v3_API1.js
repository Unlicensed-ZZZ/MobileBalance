/* BeeLine_v3_API.js
 * --------------------------------
 * Проект:    MobileBalance
 * Описание:  Обработчик для провайдера BeeLine через обновлённый API
 *            Редакция на основе возможностей API личного кабинета
 * Редакция:  2025.01.08
 *
*/

let MBextentionId = undefined;
let requestStatus = true;
let requestError = '';
let MBResult = undefined;
let cbl = undefined;

/*  Вместо 'moskva' во всех URL ниже используем 'www' - сервер подставит соответствующее значение региона
---- URL личного кабинета
Новый (с 26.09.2022)       'https://moskva.beeline.ru/customers/products/elk/'
Старый                     'https://moskva.beeline.ru/customers/products/mobile/profile/'
Ещё более ранний           'https://my.beeline.ru/c/pre/index.xhtml'
---- URL страницы авторизации
Для ЮЛ                     'https://my.beeline.ru/login.xhtml', на нём форма авторизации имеет тэг с идентификатором 'loginFormB2B:loginForm'.
                           Значение тэга 'title' = 'Личный кабинет мобильной связи «Мой Билайн» - вход в личный кабинет для управления услугами,
                             получение логина/пароля (регистрация)'
Новый (с 03.04.2024)       'https://authentication.beeline.ru', на нём форма авторизации не имеет постоянного тэга.
                           Проверяем открытие страницы авторизации по тэгу 'title'
                           Значение тэга 'title' = 'Авторизация Beeline'
Старый                     'https://moskva.beeline.ru/login/', на нём форма авторизации имеет тэг с классом 'initial-form'.
                           Значение тэга 'title' = 'Вход в приложение билайн - личный кабинет для мобильной связи и домашнего интернета'
*/

chrome.runtime.onMessage.addListener( async function( request, sender, sendResponse ) {
  try {
    if ( request.message === 'MB_takeData' ) {
      if ( sendResponse ) sendResponse( 'done' );  // Ответ в окно опроса для поддержания канала связи
      MBextentionId = sender.id;
      switch ( request.action ) {
        case 'log&pass': {
/*
          Убеждаемся, что открыта страница авторизации и на ней есть соответствующая форма для ввода учётных данных.
          Если версия страницы авторизации определилась и форма авторизации нашлась, то пробуем провести авторизацию с её использованием.
          Если ни одного варианта формы авторизации нет, то вероятнее всего не завершен предыдущий сеанс. Пробуем выполнить выход из личного
            кабинета и перезагружаем страницу. Это не даст корректно пройти текущему запросу. Но для следующего запроса страница будет в
            исходном состоянии и должна выдать форму авторизации.
          --- Изменения структуры страниц сайта с 09.10.2024 ---
          При активной сессии (не завершен предыдущий сеанс работы с личным кабинетом) на странице в заголовочной части присутствуют теги
          <meta name="SSODetectionState" content="Detected" /> и <meta name="sso_authorized" content="state: content" />
          Тогда на странице есть кнопка, содержащая номер учётных данных в формате '+7 111 222-33-44', которая открывает меню с кнопкой 'выход'.
          Форма меню генерируется вместес со страницей и сразу содержит кнопку 'выход'. Остальные пункты наполняются динамически при открытии формы.
          При отсутствии активной сессии meta-тэгов нет и кнопка в меню имеет надпись 'войти'.
*/
          // Проверяем наличие форм ввода учётных данных в предположении, что загружена страница авторизации
          let loginForm = null;
          loginForm = document.getElementById( 'loginFormB2B:loginForm' );      // Проверяем открытие страницы авторизаци для ЮЛ
          if ( ( loginForm !== null ) && ( loginForm.length > 0 ) ) loginForm = 'UL'
          else {
            loginForm = document.getElementsByClassName( 'initial-form' );      // Проверяем открытие старой (до 03.04.2024) страницы авторизаци
            if ( ( loginForm !== null ) && ( loginForm.length > 0 ) ) loginForm = 'Old'
            else {
              loginForm = document.title.includes( 'Авторизация' );             // Проверяем открытие новой (с 03.04.2024) страницы авторизации
              if ( loginForm ) loginForm = 'New'
              else loginForm = null;
            }
          }
          if ( loginForm === null ) { // Форма авторизаци не найдена, вероятно не завершен предыдущий сеанс работы с личным кабинетом
            if ( window.location.pathname.includes( 'customers/products' ) ) {  // Для старого и нового (с 26.09.2022) личных кабинетов ...
              let prevAuth = document.getElementsByTagName( 'meta' );           // ... ищем на странице тэг 'meta' с аттрибутом 'name="SSODetectionState"'
              if ( ( prevAuth.SSODetectionState !== undefined ) &&              // Если он есть, значит открыта главная страница или
                   ( prevAuth.SSODetectionState.content === 'Detected' ) ) {    //   страница личного кабинета с активной авторизацией
                // Если авторизация выполнена с учётными данными, по которым проводится запрос, то открываем страницу личного кабинета и проводим его
                if ( (await (await fetch( window.location.origin + '/api/profile/common/settings/', { method: 'GET' } )).json()).selectedLogin === request.login ) {
                  // Переходим на страницу нового личного кабинета. Она должна открыться по учётным данным с которыми мы авторизовались
                  window.location.replace( window.location.origin + '/customers/products/elk/' );
                  return;
                }
              }
            }
            requestStatus = false;    // Подготваливаем для расширения аттрибуты сообщения об ошибке ...
            console.log( requestError = `[MB] Didn't find authtorization form on the page` );
            initLogout();             // ... и завешаем сеанс работы в личном кабинете
          }
          else // Загружена страница авторизаци, на ней присутствует форма ввода учётных данных
            authInput( request.login, request.passw, loginForm ); // Пробуем выполнить авторизацию
          break;
        }
        case 'polling': {
          // Уточняем, находимся ли мы на странице личного кабинета...
          // URL нового (с 26.09.2022) личного кабинета 'https://moskva.beeline.ru/customers/products/elk/'
          // URL старого личного кабинета               'https://moskva.beeline.ru/customers/products/mobile/profile/'
          // URL ещё более раннего личного кабинета     'https://my.beeline.ru/c/pre/index.xhtml'
          if ( window.location.pathname.includes( 'elk' ) )                     // Открыта страница нового (с 26.09.2022) личного кабинета
            setTimeout( function() { // Задержка, чтобы виджеты успели прогрузиться и не забивали на сервере
              getData();             //   очередь своими запросами - в неё пойдут и запросы плагина
            }, 2000)
          else {
            if ( window.location.pathname.includes( 'c/pre' ) ||                // Открыта страница ещё более раннего личного кабинета
                 window.location.pathname.includes( 'mobile/profile' ) ) {      // Открыта страница старого (до 26.09.2022) личного кабинета
              // Новые запросы в старом личном кабинете работают не всегда корректно, а в ещё более раннем не работают совсем
              // Пробуем открыть новый (с 26.09.2022) личный кабинет '.../customers/products/elk/'
              console.log( requestError = `[MB] Current personal profile page is not valid for plugin` );
              // Запрашиваем у расширения MobileBalance повтор этого этапа запроса
              chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_repeatCurrentPhase', error: requestError }, null );
              // Переходим на страницу нового личного кабинета. Она должна открыться по учётным данным с которыми мы авторизовались
              window.location.replace( window.location.origin + '/customers/products/elk/' );
            }
            else { // Открылась стартовая страница Beeline (или были ошибки загрузки страницы). Проверяем, есть ли авторизация
              requestError = `[MB] Current page is not personal profile page`;
              if ( window.location.pathname.includes( 'customers/products' ) ) {  // Для старого и нового (с 26.09.2022) личных кабинетов ...
                let prevAuth = document.getElementsByTagName( 'meta' );           // ... ищем на странице тэг 'meta' с аттрибутом 'name="SSODetectionState"'
                if ( ( prevAuth.SSODetectionState !== undefined ) &&              // Если он есть, значит открыта главная страница или
                     ( prevAuth.SSODetectionState.content === 'Detected' ) ) {    //   страница личного кабинета с активной авторизацией
                  // Если авторизация выполнена с учётными данными, по которым проводится запрос, то открываем страницу личного кабинета
                  if ( (await (await fetch( window.location.origin + '/api/profile/common/settings/', { method: 'GET' } )).json()).selectedLogin === request.login ) {
                    // Запрашиваем у расширения MobileBalance повтор этого этапа запроса
                    chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_repeatCurrentPhase', error: requestError }, null );
                    // Переходим на страницу нового личного кабинета. Она должна открыться по учётным данным с которыми мы авторизовались
                    window.location.replace( window.location.origin + '/customers/products/elk/' );
                    return;
                  }
                  requestError = `[MB] Active authtorization was not detected`;
                }
              }
              // Если в предыдущем каскаде условий не дошли до 'return', который остановил выполнение, значит есть ошибки при загрузке
              //   страницы или она загружена с авторизацией под другими учётными данными
              requestStatus = false; // Выдаём расширению MobileBalance ошибку и выходим
              console.log( requestError );
              chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_takeData', status: requestStatus,
                                                           error: requestError, data: undefined }, null );
              return;
            }
          }
          break;
        }
      }
    }
    else return;
  }
  catch( err ) {
    console.log( err.toString() );
    return;
  }
})


function sleep( ms ) {
//       -----------
  return new Promise( resolve => setTimeout( resolve, ms ) );
}


async function authInput( login, passw, pageVersion ) {
//             --------------------------------------
  switch ( pageVersion ) {
    case 'UL': { // Авторизация на странице формы для ЮЛ
      let loginForm = document.getElementById( 'loginFormB2B:loginForm' );              // На форме авторизации...
      let formInputs = loginForm.getElementsByTagName( 'input' );                       // ...находим все поля ввода...
      formInputs['loginFormB2B:loginForm:login'].value = login;                         // ...вводим значения в поля учётных данных...
      formInputs['loginFormB2B:loginForm:passwordPwd'].value = formInputs['loginFormB2B:loginForm:password'].value = passw;
      loginForm.submit();                                                               // ...и отправляем форму на сервер для авторизации
      // В результате должна быть открыта страница личного кабинета и этот экземпляр скрипта будет утрачен
      break;
    } // UL //
    case 'Old': { // Авторизация на странице старой (до 03.04.2024) формы
      let loginForm = document.getElementsByClassName( 'initial-form' );                // На форме авторизации...
      let tabsArray = loginForm[ 0 ].getElementsByClassName( 'tabs__item--secondary' )  // ...находим все 'Tab'-ы с кнопками для перехода на вкладки
      for ( let idx = 0; idx < tabsArray.length; ++idx ) {                              // Находим вкладку входа по паролю (должна оказаться 3-ья, последняя)
        if ( tabsArray[ idx ].innerText === 'С постоянным паролем' ) {
          tabsArray[ idx ].getElementsByTagName( 'button' )[ 0 ].click();               // Переходим на неё, нажимая кнопку перехода, расположенную на её 'Tab'-е
          await sleep( 200 );                                                           // Даём время на подгрузку скрипта формы с сервера
          break;
        }
      }
      loginForm = document.getElementsByClassName( 'password-form' )[ 0 ].firstChild;   // Находим форму входа по паролю (вложена в div с классом 'password-form')
      loginForm.login.value = login;                                                    // Вводим значения в поля учётных данных
      loginForm.password.value = passw;
      loginForm.submit();                                                               // Отправляем форму на сервер для авторизации
      // В результате должна быть открыта страница личного кабинета и этот экземпляр скрипта будет утрачен
      break;
    } // Old //
    case 'New': { // Авторизация на странице новой (с 03.04.2024) формы
      let loginForm = null;
      let idx, buttonsArray, inpElem, afterForm;
      // По умолчанию должна быть открыта форма ввода для входа по 'Мобильному ID', нам нужна форма входа по 'Логину'
      // На странице авторизации список (тэг 'ul') единственный. Он содержит 'Tab'-ы с кнопками для перехода на вкладки. Ищем сразу элементы этого списка
      // Если форма авторизации не прогрузилась, то результата перехода по 'Tab'-ам не будет, но и ошибки тоже (элемент для нажатия не будет найден)
      buttonsArray = document.getElementsByTagName( 'li' );                             // Находим все 'Tab'-ы с кнопками для перехода на вкладки
      for ( idx = 0; idx < buttonsArray.length; ++idx ) {                               // Находим вкладку входа по логину (должна оказаться 3-ья, последняя)
        if ( buttonsArray[ idx ].innerText === 'Логин' ) {
          buttonsArray[ idx ].getElementsByTagName( 'button' )[ 0 ].click();            // Переходим на неё, нажимая кнопку перехода, расположенную на её 'Tab'-е
          await sleep( 200 );                                                           // Даём время на подгрузку скрипта формы с сервера
          break;
        }
      }
      // Форма ввода по 'Мобильному ID' должна быть замещена формой ввода ввода учётных данных (логин и пароль)
      loginForm = document.getElementsByTagName( 'form' );                              // Ищем на странице форму авторизации
      if ( ( loginForm !== null ) && ( loginForm.length > 0 ) ) {                       // На форме авторизации...
        inpElem = loginForm[ 0 ].getElementsByTagName( 'input' )[ 0 ];                  // ...определяем поле ввода логина
        inpElem.setAttribute( 'value', login );                                         // Вводим значение в поле ввода
        inpElem.dispatchEvent( new Event( 'change', { bubbles: true } ) );              // Инициируем приём значения генерацией события ввода
        inpElem = loginForm[ 0 ].getElementsByTagName( 'input' )[ 1 ];                  // ...определяем поле ввода пароля
        inpElem.setAttribute( 'value', passw );                                         // Вводим значение в поле ввода
        inpElem.dispatchEvent( new Event( 'change', { bubbles: true } ) );              // Инициируем приём значения генерацией события ввода
        buttonsArray = loginForm[ 0 ].getElementsByTagName( 'button' );                 // ...находим все кнопки
        for ( idx = 0; idx < buttonsArray.length; ++idx ) {                             // Определяем кнопку отправки учётных данных и...
          if ( buttonsArray[ idx ].type === 'submit' ) {
            buttonsArray[ idx ].click();                                                // ..."нажимаем" её
            await sleep( 200 );                                                         // Даём время на подгрузку скрипта формы с сервера
            break;
          }
        }
      }
      else { // Страница авторизации не прогрузилась (замещения формы авторизаци тоже не было. Выдаём расширению MobileBalance ошибку и выходим
        requestStatus = false;    // Подготваливаем для расширения аттрибуты сообщения об ошибке ...
        console.log( requestError = `[MB] Didn't find authtorization form on the page` );
        initLogout();             // ... и завешаем сеанс работы в личном кабинете
        return;
      }
      // На страницу должна быть добавлена форма ввода капчи. Чтобы она нашлась массив форм нужно обновить. Форма ввода учётных данных останется вне зоны видимости
      // Если BeeLine её уберёт, то должен сразу пойти вход в личный кабинет, страница перезагрузится и код ниже выполняться уже не будет
      await sleep( 200 );                                                               // Даём время на подгрузку скрипта формы с сервера
      loginForm = document.getElementsByTagName( 'form' );                              // Ищем на странице форму ввода капчи, на ней...
      inpElem = document.getElementById( 'CaptchaForm-input' );                         // ...определяем поле ввода значения капчи
    // ---- Однократная попытка решить капчу -------------------------------------------
      let captchaOriginal = loginForm[ 1 ].getElementsByTagName( 'img' )[ 0 ];          // Определяем оригинальный элемент изображения капчи
      let captchaElem = document.createElement( 'img' );                                // Подготавливаем копию объекта изображения капчи,
      captchaElem.id = 'captcha';                                                       //   пригодную для обработки библиотекой cbl.js ...
      captchaElem.style.display = 'none';                                               //   ...отображать её на странице нет необходимости...
      captchaElem.src = captchaOriginal.src;
      document.body.append( captchaElem );                                              //   ...вставляем эту копию на страницу авторизации
      inpElem.setAttribute( 'value', '[MB] Подождите, пробуем решить капчу...' );       // В поле ввода значения капчи записываем текст ожидания
      await sleep( 100 );                                                               // Пауза, чтобы надпись в поле ввода успела отобразиться
      cbl = new CBL( {                                                                  // Задаём параметры для решения капчи
        preprocess: function(img) {         // Последовательность операций с изображением капчи
          img.removeLight( 65 );
          img.blur( 1 );
          img.removeLight( 220 );
          img.blur( 1 );
          img.cropRelative( 42, 20, 12, 18 );
          img.removeLight( 240 );
          img.binarize( 180 );
          img.colorRegions( 50, true, 4 );  // tolerance = 50, ignoreWhite = true, pixelJump = 4 (присоединять зоны отстоящие на 4 пикселя)
        },
        model_string: /* Используем ранее подготовленную модель решения капчи */ ``,
        character_set: "0123456789",
        blob_min_pixels: 300,               // Минимальное кол-во пикселей для выделения изображения символа
        blob_max_pixels: 7000,              // Максимальное кол-во пикселей для выделения изображения символа
        pattern_width: 30,                  // Ширина приведения конечного изображения символа
        pattern_height: 40,                 // Высота приведения конечного изображения символа
        perceptive_colorspace: true
      });
      await cbl.solve( 'captcha' ).done( function ( captchaSolution ) {                 // Предпринимаем попытку решить капчу...
        inpElem.setAttribute( 'value', captchaSolution );                               // ...и вставляем полученное решение в поле ввода значения капчи
        inpElem.dispatchEvent( new Event( 'change', { bubbles: true } ) );              // Инициируем приём значения генерацией события ввода
      });
      captchaOriginal.addEventListener( 'load', captchaSolveStart );                    // Далее, если понадобится, будем решать капчу только при нажатии
                                                                                        //   пользователем кнопки её обновления рядом с изображением капчи,
                                                                                        //   при этом нажатие кнопки ввода остётся за пользователем
    // ---------------------------------------------------------------------------------
      buttonsArray = loginForm[ 1 ].getElementsByTagName( 'button' );                   // ...находим на форме все кнопки
      for ( idx = 0; idx < buttonsArray.length; ++idx ) {                               // Определяем кнопку отправки учётных данных и...
        if ( buttonsArray[ idx ].type === 'submit' ) {
          buttonsArray[ idx ].click();                                                  // ..."нажимаем" её
          await sleep( 200 );                                                           // Даём время на подгрузку скрипта формы с сервера
          break;
        }
      }
      await sleep( 1000 );                                                              // Даём время для начала загрузки страницы личного кабинета
      // В результате должна быть открыта страница личного кабинета. Этот экземпляр скрипта будет утрачен и код ниже выполняться не будет
      // ---------------- Эта часть кода будет выполняться, если логин, пароль или капча введены неправильно
      afterForm = document.getElementsByTagName( 'form' );                              // Повторно определяем формы на странице
      if ( afterForm.length === loginForm.length ) {                                    // Если осталось две формы, значит на второй (ввода капчи) есть ошибка
        // Если капча введена неправильно, то форма ввода капчи останется и на ней будет выведено сообщение об ошибке. Ничего не делаем, давая пользователю
        //   возможность внести правильное значение капчи вручную и нажать кнопку подтверждения. Если будет введено правильное значение, то пойдёт загрузка
        //   страницы личного кабинета и этот экземпляр скрипта будет утрачен
        // Если пользователь не внесёт вручную правильное значение капчи до истечения 'respondTimeoutValue' = времени ожидания ответа от провайдера на запрос,
        //   то расширение MobileBalance перезагрузит страницу, а запрос будет считаться неудачным
        afterForm[ 1 ].getElementsByTagName( 'input' )[ 0 ].focus();
      }
      else
        if ( ( afterForm.length < loginForm.length ) &&                                 // Если форма на странице одна, значит на форме ввода учётных данных есть ошибка
             ( afterForm[ 0 ] === loginForm[ 0 ] ) ) {
          // Если логин или пароль были неправильными - после ввода правильной капчи снова откроется форма ввода учётных данных, на ней будет выведено
          //   сообщение об ошибке. Передаём расширению MobileBalance ошибку и заканчиваем работу плагина
          requestStatus = false;    // Подготваливаем для расширения аттрибуты сообщения об ошибке ...
          console.log( requestError = `[MB] Login or password error` );
          initLogout();             // ... и завешаем сеанс работы в личном кабинете
          return;
        }
      // ----------------
      break;
    } // New //
  } // switch //
}


async function captchaSolveStart( evnt ) {
//             -----------------
  let inpElem = document.getElementById( 'CaptchaForm-input' );         // Определяем поле ввода значения капчи
  inpElem.value = '[MB] Подождите, пробуем решить капчу...';            // В поле ввода значения капчи записываем текст ожидания
  document.getElementById( 'captcha' ).src = evnt.target.src;           // Копируем новое изображение капчи в наш объект-копию
  await sleep( 100 );                                                   // Пауза, чтобы в элементах успели отработать изменения
  await cbl.solve( 'captcha' ).done( function ( captchaSolution ) {     // Предпринимаем попытку решить капчу...
    inpElem.value = captchaSolution;                                    // ...и вставляем полученное решение в поле ввода значения капчи
    inpElem.dispatchEvent( new Event( 'change', { bubbles: true } ) );  // Инициируем приём значения генерацией события ввода
    inpElem.focus();
  });
}


function initLogout() {
//       ----------
  // Завершаем текущий сеанс, страницу на следующем шаге перезагрузит расширение
  if ( window.location.pathname.includes( 'customers/products' ) ) { // Выход из старого и нового (с 26.09.2022) личных кабинетов
    // Определяем в меню кнопку пункта выхода из личного кабинета
    let menuItems = Array.from( document.getElementsByTagName( 'button' ) );
    let exitButton = menuItems.find( (item) => { return (item.innerText.toUpperCase() === 'ВЫЙТИ') });
    // Передаём результаты опроса расширению
    chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_takeData',
                                                 status: requestStatus, error: requestError,
                                                 data: (MBResult === undefined) ? undefined : MBResult }, null );
    exitButton.click(); // 'Нажимаем' на кнопку пункта выхода из личного кабинета
  }
  else { // Выход для ещё более раннего личного кабинета ('https://my.beeline.ru/c/pre/index.xhtml')
    // Передаём результаты опроса расширению
    chrome.runtime.sendMessage( MBextentionId, { message: 'MB_workTab_takeData',
                                                 status: requestStatus, error: requestError,
                                                 data: (MBResult === undefined) ? undefined : MBResult }, null );
    window.location.replace( window.location.origin + '/c/logout.xhtml' );
  }
}


async function getData() {
//             ---------
  fetch( window.location.origin + '/apigw/ub/balance/main/', { method: 'GET', credentials: 'include' } )
  .then( function( response ) {
    response.json()
    .then( function( response ) {
      console.log( `[MB] Response for '/apigw/ub/balance/main/' API: ${JSON.stringify( response )}` );
      // Забираем данные текущего баланса
      MBResult = { Balance: parseFloat( response.data.balanceValue.toFixed(2) ) }; // Создаём 1-ое значение объекта ответа
      // Забираем статус блокировки
      MBResult.BlockStatus = ( response.data.isBlocked ) ? 'Blocked' : '';

      fetch( window.location.origin + '/api/uni-profile-mobile/blocks/', { method: 'GET', credentials: 'include' } )
      .then( function( response ) {
        response.json()
        .then( function( response ) {
          console.log( `[MB] Response for '/api/uni-profile-mobile/blocks/' API: ${JSON.stringify( response )}` );
          // Получаем наименование тарифного плана
          MBResult.TarifPlan = response.tariff.name;
          // Получаем остатки пакетов ...
          if ( ( response.accumulators.items !== undefined ) &&
               ( response.accumulators.items.length > 0 ) ) {                                   // ... если они есть
            for ( let i = 0; i < response.accumulators.items.length; ++i ) {
              // Получаем остаток пакета голосовых минут (если предусмотрено тарифом) или обозначаем признак безлимитного пакета (-1)
              if ( [ 'SECONDS', 'MINUTES' ].includes( response.accumulators.items[ i ].unit ) ) {
                if ( response.accumulators.items[ i ].isUnlimited )
                  MBResult.Minutes = -1
                else {
                  MBResult.Minutes = response.accumulators.items[ i ].rest;
                  if ( response.accumulators.items[ i ].unit === 'SECONDS' )
                    MBResult.Minutes = MBResult.Minutes / 60;                                   // Всегда в минутах
                }
              }
              // Получаем остаток пакета SMS (если предусмотрено тарифом) или обозначаем признак безлимитного пакета (-1)
              if ( response.accumulators.items[ i ].unit === 'SMS' )
                MBResult.SMS = ( response.accumulators.items[ i ].isUnlimited ) ? -1 :
                  response.accumulators.items[ i ].rest;
              // Получаем остаток пакета Интернет (если предусмотрено тарифом) или обозначаем признак безлимитного пакета (-1)
              if ( response.accumulators.items[ i ].unit === 'KBYTE' )
                MBResult.Internet = ( response.accumulators.items[ i ].isUnlimited ) ? -1 :
                  parseFloat( ( response.accumulators.items[ i ].rest / 1024 ).toFixed(3) );    // Всегда в мегабайтах
            }
          }

          fetch( window.location.origin + '/api/uni-profile-mobile/tariff-fee/', { method: 'GET', credentials: 'include' } )
          .then( function( response ) {
            response.json()
            .then( function( response ) {
              console.log( `[MB] Response for '/api/uni-profile-mobile/tariff-fee/' API: ${JSON.stringify( response )}` );
              let freeCounter = 0, paidCounter = 0, subscriptionsCount = 0, multiplier = 1,
                  paymentAmount = ( response.rcRate !== undefined ) ? response.rcRate : 0;
              // Получаем / вычисляем месячный платёж по тарифу
              if ( ( paymentAmount > 0 ) && ( response.rcRatePeriodDays !== undefined ) )
                multiplier = ( response.rcRatePeriodDays === 1 ) ? 30 : 1;  // rcRatePeriodDays может быть 1 (="₽/сут"), 30 и 31 (="₽/мес")
              paymentAmount = parseFloat( ( paymentAmount * multiplier ).toFixed(0) );

              fetch( window.location.origin + '/api/uni-profile-mobile/services/', { method: 'GET', credentials: 'include' } )
              .then( function( response ) {
                response.json()
                .then( function( response ) {
                  console.log( `[MB] Response for '/api/uni-profile-mobile/services/' API: ${JSON.stringify( response )}` );
                  // Определяем количество бесплатных и платных услуг
                  for( let i = 0; i < response.length; i++ ) {
                    if ( ( response[ i ].fee !== undefined ) && ( response[ i ].fee > 0 ) ) {
                      ++paidCounter;
                      // Для периода оплаты 'сут' приводим сумму к месячной (за 30 дней), для периода 'мес' не изменяем
                      paymentAmount += response[ i ].fee * ( ( response[ i ].feePeriod === 'сут' ) ? 30 : 1 );
                    }
                    else
                      ++freeCounter;
                  }

                  fetch( window.location.origin + '/api/uni-profile-mobile/subscriptions/', { method: 'GET', credentials: 'include' } )
                  .then( function( response ) {
                    response.json()
                    .then( function( response ) {
                      console.log( `[MB] Response for '/api/uni-profile-mobile/subscriptions/' API: ${JSON.stringify( response )}` );
                      // Определяем количество подписок
                      subscriptionsCount = ( response !== undefined ) ? response.length : 0;
                      // Формируем строку состава услуг в формате: 'количество бесплатных' / 'количество платных' /
                      //                                           'количество подписок' / '(сумма по платным)'
                      MBResult.UslugiOn = `${String(freeCounter)} / ${String(paidCounter)} / ${String(subscriptionsCount)} / ` +
                                          `(${(paymentAmount).toFixed(2)})`;

                      initLogout();       // Завешаем сеанс работы в личном кабинете
                    })
                    .catch( function( err ) { fetchError( `Error getting JSON for '/api/uni-profile-mobile/subscriptions/' response: ${err.message}` ) } )
                  })
                  .catch( function( err ) { fetchError( `Fetch error getting '/api/uni-profile-mobile/subscriptions/': ${err.message}` ) } )
                })
                .catch( function( err ) { fetchError( `Error getting JSON for '/api/uni-profile-mobile/services/' response: ${err.message}` ) } )
              })
              .catch( function( err ) { fetchError( `Fetch error getting '/api/uni-profile-mobile/services/': ${err.message}` ) } )
            })
            .catch( function( err ) { fetchError( `Error getting JSON for '/api/uni-profile-mobile/tariff-fee/' response: ${err.message}` ) } )
          })
          .catch( function( err ) { fetchError( `Fetch error getting '/api/uni-profile-mobile/tariff-fee/': ${err.message}` ) } )
        })
        .catch( function( err ) { fetchError( `Error getting JSON for '/api/uni-profile-mobile/blocks/' response: ${err.message}` ) } )
      })
      .catch( function( err ) { fetchError( `Fetch error getting '/api/uni-profile-mobile/blocks/': ${err.message}` ) } )
    })
    .catch( function( err ) { fetchError( `Error getting JSON for '/apigw/ub/balance/main/' response: ${err.message}` ) } )
  })
  .catch( function( err ) { fetchError( `Fetch error getting '/apigw/ub/balance/main/': ${err.message}` ) } )

  function fetchError( err ) {
  //       ----------
    requestStatus = false;
    console.log( requestError = `[MB] ${err}` );
    initLogout();
  }
}


// CBL-js - CAPTCHA Breaking Library in JavaScript by Scott Clayton (https://github.com/skotz/cbl-js)
// Сокращено до объёма решения капчи по загружаемой модели
var CBL=function(t){var e={preprocess:function(){console.log("You should define a preprocess method!")},model_file:"",model_string:"",model_loaded:function(){},training_complete:function(){},blob_min_pixels:1,blob_max_pixels:99999,blob_min_width:1,blob_min_height:1,blob_max_width:99999,blob_max_height:99999,pattern_width:20,pattern_height:20,pattern_maintain_ratio:!1,pattern_auto_rotate:!1,incorrect_segment_char:"\\",blob_debug:"",blob_console_debug:!1,perceptive_colorspace:!1,character_set:"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",fixed_blob_locations:[],exact_characters:-1,exact_characters_width:-1,exact_characters_play:-1};t=t||{};for(var a in e)e.hasOwnProperty(a)&&!t.hasOwnProperty(a)&&(t[a]=e[a]);var r={solve:function(t){return r.train(t)},done:function(t){l(function(){t(d),u()})},train:function(e){return l(function(){var a,r=!1;null!=document.getElementById(e)?a=document.getElementById(e):(a=document.createElement("img"),r=!0);var i=function(){var e="",r=document.createElement("canvas");r.width=a.width,r.height=a.height,r.getContext("2d",{willReadFrequently:!0}).drawImage(a,0,0);var i=new n(r);t.preprocess(i);var o;o=t.fixed_blob_locations.length>0?i.segmentBlocks(t.pattern_width,t.pattern_height,t.fixed_blob_locations,t.blob_debug):i.segmentBlobs(t.blob_min_pixels,t.blob_max_pixels,t.pattern_width,t.pattern_height,t.blob_debug);for(var h=0;h<o.length;h++)e+=g(c(o[h]));console.log("Solution = "+e),d=e,u()};a.complete&&!r?i():(a.onload=i,r&&(a.src=e))}),this},loadModelString:function(e){e=I.decompressFromBase64(e),i=new Array;for(var a=e.replace(/\[/g,"").split("]"),r=0;r<a.length;r++){var n=a[r].split("=");if(2==n.length){var o=n[1],h=n[0];i.push({pattern:o,solution:h})}}i.length?t.model_loaded():console.log("No patterns to load in provided model.")}},n=function(e){var a={colorRegions:function(t,r,n){void 0===r&&(r=!1),void 0===n&&(n=0);for(var i=new Array,o=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),h=0;h<o.width;h++)for(var d=0;d<o.height;d++){var l=4*h+4*d*o.width;x(i,l)||a.floodfill(h,d,b(),t,o,i,r,n)}return e.getContext("2d",{willReadFrequently:!0}).putImageData(o,0,0),this},floodfill:function(t,a,r,n,i,o,h,d){var l=!1;void 0===i&&(l=!0,i=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height)),void 0===d&&(d=0);var u,g,c=i.data,s=c.length,f=[],v=4*(t+a*i.width),m=v,_=v,y=4*i.width,b=[c[v],c[v+1],c[v+2],c[v+3]],C=c[v]+c[v+1]+c[v+2]+c[v+3];if(!p(v,b,C,r,c,s,n))return!1;for(f.push(v);f.length;)if(v=f.pop(),(void 0===o||!x(o,v))&&w(v,b,C,r,c,s,n,o,h)){for(m=v,_=v,u=(g=v/y*y)+y;g<(_-=4)&&w(_,b,C,r,c,s,n,o,h););for(;u>(m+=4)&&w(m,b,C,r,c,s,n,o,h););d>0&&(_-=4*d,m+=4*d);for(var I=_;I<m;I+=4)I-y>=0&&p(I-y,b,C,r,c,s,n)&&f.push(I-y),I+y<s&&p(I+y,b,C,r,c,s,n)&&f.push(I+y)}l&&e.getContext("2d",{willReadFrequently:!0}).putImageData(i,0,0)},blur:function(t){return void 0===t&&(t=1),2==t?this.convolute([[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1],[1,1,1,1,1]],.04):3==t?this.convolute([[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1]],1/49):this.convolute([[1,1,1],[1,1,1],[1,1,1]],1/9)},sharpen:function(){return this.convolute([[0,-1,0],[-1,5,-1],[0,-1,0]])},grayscale:function(){for(var t=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),a=0;a<t.width;a++)for(var r=0;r<t.height;r++){var n=4*a+4*r*t.width,i=.34*t.data[n]+.5*t.data[n+1]+.16*t.data[n+2];t.data[n]=i,t.data[n+1]=i,t.data[n+2]=i,t.data[n+3]=255}return e.getContext("2d",{willReadFrequently:!0}).putImageData(t,0,0),this},removeGray:function(t){for(var a=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),r=0;r<a.width;r++)for(var n=0;n<a.height;n++){var i=4*r+4*n*a.width;Math.max(Math.abs(a.data[i]-a.data[i+1]),Math.abs(a.data[i+1]-a.data[i+2]),Math.abs(a.data[i+2]-a.data[i]))<t&&(a.data[i]=255,a.data[i+1]=255,a.data[i+2]=255,a.data[i+3]=255)}return e.getContext("2d",{willReadFrequently:!0}).putImageData(a,0,0),this},removeLight:function(t){for(var a=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),r=0;r<a.width;r++)for(var n=0;n<a.height;n++){var i=4*r+4*n*a.width;Math.max(a.data[i],a.data[i+1],a.data[i+2])>t&&(a.data[i]=255,a.data[i+1]=255,a.data[i+2]=255,a.data[i+3]=255)}return e.getContext("2d",{willReadFrequently:!0}).putImageData(a,0,0),this},binarize:function(t){for(var a=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),r=0;r<a.width;r++)for(var n=0;n<a.height;n++){var i=4*r+4*n*a.width,o=.34*a.data[i]+.5*a.data[i+1]+.16*a.data[i+2];a.data[i]=o>=t?255:0,a.data[i+1]=o>=t?255:0,a.data[i+2]=o>=t?255:0,a.data[i+3]=255}return e.getContext("2d",{willReadFrequently:!0}).putImageData(a,0,0),this},convolute:function(t,a){var r=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),n=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),i=t[0].length,o=t.length,h=Math.floor(o/2);void 0===a&&(a=1);for(var d=0;d<r.height-1;d++)for(var l=0;l<r.width-1;l++){for(var u=4*l+4*d*r.width,g=0,c=0,s=0,f=0;f<i;f++)for(var p=0;p<o;p++){var w=4*((d+(f-h))*r.width+(l+(p-h)));g+=r.data[(w+r.data.length)%r.data.length]*t[f][p],c+=r.data[(w+1+r.data.length)%r.data.length]*t[f][p],s+=r.data[(w+2+r.data.length)%r.data.length]*t[f][p]}n.data[u+0]=a*g+0,n.data[u+1]=a*c+0,n.data[u+2]=a*s+0,n.data[u+3]=255}return e.getContext("2d",{willReadFrequently:!0}).putImageData(n,0,0),this},erode:function(){return this.convolute([[-1,-1,-1],[-1,8,-1],[-1,-1,-1]])},foreach:function(t){for(var a=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),r=0;r<a.width;r++)for(var n=0;n<a.height;n++){var i=4*r+4*n*a.width,o={r:a.data[i+0],g:a.data[i+1],b:a.data[i+2]};o=t(o),a.data[i+0]=o.r,a.data[i+1]=o.g,a.data[i+2]=o.b,a.data[i+3]=255}return e.getContext("2d",{willReadFrequently:!0}).putImageData(a,0,0),this},removeTransparency:function(t,a){void 0===t&&(t=128),void 0===a&&(a={r:255,g:255,b:255});for(var r=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),n=0;n<r.width;n++)for(var i=0;i<r.height;i++){var o=4*n+4*i*r.width;r.data[o+3]<=t&&(r.data[o+0]=a.r,r.data[o+1]=a.g,r.data[o+2]=a.b,r.data[o+3]=255)}return e.getContext("2d",{willReadFrequently:!0}).putImageData(r,0,0),this},invert:function(t){return this.foreach(function(t){return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,t})},cropRelative:function(t,a,r,n){var i=e.getContext("2d",{willReadFrequently:!0}).getImageData(t,a,e.width-t-r,e.height-a-n);return e.width=e.width-t-r,e.height=e.height-a-n,e.getContext("2d",{willReadFrequently:!0}).putImageData(i,0,0),this},removeHorizontalLine:function(t,a){void 0===a&&(a={r:0,g:0,b:0}),void 0===t&&(t=1);for(var r=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),n=[0,-1,1],i=[],o=0;o<e.height;o++)(d=this.getPixel(0,o)).r==a.r&&d.g==a.g&&d.b==a.b&&i.push({x:0,y:o});for(var h=[],o=0;o<e.height;o++){var d=this.getPixel(e.width-1,o);d.r==a.r&&d.g==a.g&&d.b==a.b&&h.push({x:e.width-1,y:o})}for(var l=this,u=1e4,g=[],c=function(t,r,i){if(u--<=0)return null;var o=[],d=JSON.parse(JSON.stringify(i));if(d.points.push({x:t,y:r}),t>=e.width-1&&h.some(function(t){return t.x==d.points[d.points.length-1].x&&t.y==d.points[d.points.length-1].y}))return d;var s=l.getPixel(t,r);if(s.r!=a.r||s.g!=a.g||s.b!=a.b)return null;for(var f=0;f<n.length;f++)if(r+n[f]>=0&&r+n[f]<e.height){if(d.vertical+=Math.abs(n[f]),g.some(function(e){return e.x==t+1&&e.y==r+n[f]}))continue;var p=c(t+1,r+n[f],d);if(null!=p)return o.push(p),p;g.push({x:t+1,y:r+n[f]})}return o&&o.length?o.reduce(function(t,e){return t.vertical<e.vertical?t:e}):null},s=0;s<i.length;s++){var f=c(i[s].x,i[s].y,{points:[],vertical:0});if(f&&f.points)for(var p=0;p<f.points.length;p++)for(var w=-t;w<=t;w++){var v=4*f.points[p].x+4*(f.points[p].y+w)*r.width,m=4*f.points[p].x+4*(f.points[p].y+w-1)*r.width;r.data[v+0]=r.data[m+0],r.data[v+1]=r.data[m+1],r.data[v+2]=r.data[m+2],r.data[v+3]=255}}return e.getContext("2d",{willReadFrequently:!0}).putImageData(r,0,0),this},getPixel:function(t,a){var r=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),n=4*t+4*a*r.width;return{r:r.data[n+0],g:r.data[n+1],b:r.data[n+2]}},segmentBlocks:function(a,r,n,i){void 0===a&&(a=20),void 0===r&&(r=20),void 0===n&&(n=[]);for(var o=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),h=new Array,d=0;d<n.length;d++){var l=document.createElement("canvas");l.width=o.width,l.height=o.height;l.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height).data;var u=n[d].x1,g=n[d].x2,c=n[d].y1,s=n[d].y2,f=document.createElement("canvas");if(f.width=g-u+1,f.height=s-c+1,f.getContext("2d",{willReadFrequently:!0}).putImageData(o,-u,-c,u,c,f.width,f.height),l.width=a,l.height=r,t.pattern_maintain_ratio){var p=f.width,w=f.height;p/a>w/r?l.getContext("2d",{willReadFrequently:!0}).drawImage(f,0,0,a,w*(a/p)):l.getContext("2d",{willReadFrequently:!0}).drawImage(f,0,0,p*(r/w),r)}else l.getContext("2d",{willReadFrequently:!0}).drawImage(f,0,0,a,r);if(h.push(l),void 0!==i&&i.length){var v=document.createElement("img");v.src=l.toDataURL(),document.getElementById(i).appendChild(v)}}return h},segmentBlobs:function(r,n,i,o,h){void 0===r&&(r=1),void 0===n&&(n=1e5),void 0===i&&(i=20),void 0===o&&(o=20);for(var d=e.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height),l=function(t,e){return 255*t[e]*255+256*t[e+1]+t[e+2]},u=l([255,255,255],0),g=new Array,c=0;c<d.width;c++)for(M=0;M<d.height;M++){var f=4*c+4*M*d.width,p=l(d.data,f);x(g,p)||p==u||g.push(p)}for(var w=new Array,v=0;v<g.length;v++){var m=document.createElement("canvas");m.width=d.width,m.height=d.height;for(var _=(B=m.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,e.width,e.height)).data,y=0,b=d.width,I=0,R=d.height,F=0,c=0;c<d.width;c++)for(var M=0;M<d.height;M++){f=4*c+4*M*d.width;(p=l(d.data,f))==g[v]?(_[f]=0,_[f+1]=0,_[f+2]=0,_[f+3]=255,y++,c<b&&(b=c),c>I&&(I=c),M<R&&(R=M),M>F&&(F=M)):(_[f]=255,_[f+1]=255,_[f+2]=255,_[f+3]=255)}y>=r&&y<=n&&I-b>=t.blob_min_width&&F-R>=t.blob_min_height&&I-b<=t.blob_max_width&&F-R<=t.blob_max_height&&((G=document.createElement("canvas")).width=I-b+1,G.height=F-R+1,G.getContext("2d",{willReadFrequently:!0}).putImageData(B,-b,-R,b,R,G.width,G.height),m.width=i,m.height=o,m.orig_width=G.width,m.orig_image=G,t.pattern_maintain_ratio?(H=G.width)/i>(Y=G.height)/o?m.getContext("2d",{willReadFrequently:!0}).drawImage(G,0,0,i,Y*(i/H)):m.getContext("2d",{willReadFrequently:!0}).drawImage(G,0,0,H*(o/Y),o):m.getContext("2d",{willReadFrequently:!0}).drawImage(G,0,0,i,o),t.pattern_auto_rotate&&(m=a.histogramRotate(m)),w.push(m))}if(t.exact_characters>0){for(;w.length<t.exact_characters;){for(var q=0,D=w[0].orig_width,f=1;f<w.length;f++)w[f].orig_width>D&&(D=w[f].orig_width,q=f);var A=2;t.exact_characters_width>0&&(A=Math.ceil(D/t.exact_characters_width),A=Math.max(A,2),A=Math.min(A,t.exact_characters-w.length+1));for(var E=1;E<=A;E++){var O=s(w[q].orig_image),B=O.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,O.width,O.height),P=O.width/A;if(b=Math.floor(P*(E-1)),I=Math.floor(P*E),R=0,F=O.height,t.exact_characters_play>0){for(var U=0,j=0,k=b-t.exact_characters_play;k<b+t.exact_characters_play;k++){for(var S=0,T=R;T<F;T++)255==(J=C(B,k,T)).r&&255==J.g&&255==J.b&&S++;S>U&&(j=k,U=S)}b=j;for(var L=0,z=0,k=I+t.exact_characters_play;k>I-t.exact_characters_play;k--){for(var N=0,T=R;T<F;T++)255==(J=C(B,k,T)).r&&255==J.g&&255==J.b&&N++;N>L&&(z=k,L=N)}I=z}for(T=R;T<F&&0==R;T++)for(k=b;k<I&&0==R;k++)255==(J=C(B,k,T)).r&&255==J.g&&255==J.b||(R=T);for(T=F-1;T>R&&F==O.height;T--)for(k=b;k<I&&F==O.height;k++){var J=C(B,k,T);255==J.r&&255==J.g&&255==J.b||(F=T)}var G=document.createElement("canvas");if(G.width=I-b+1,G.height=F-R+1,G.getContext("2d",{willReadFrequently:!0}).putImageData(B,-b,-R,b,R,G.width,G.height),O.width=i,O.height=o,O.orig_width=G.width,O.orig_image=G,t.pattern_maintain_ratio){var H=G.width,Y=G.height;H/i>Y/o?O.getContext("2d",{willReadFrequently:!0}).drawImage(G,0,0,i,Y*(i/H)):O.getContext("2d",{willReadFrequently:!0}).drawImage(G,0,0,H*(o/Y),o)}else O.getContext("2d",{willReadFrequently:!0}).drawImage(G,0,0,i,o);t.pattern_auto_rotate&&(O=a.histogramRotate(O)),w.splice(q+E,0,O)}w.splice(q,1)}for(;w.length>t.exact_characters;){for(var K=0,Q=w[0].orig_width,f=1;f<w.length;f++)w[f].orig_width<Q&&(Q=w[f].orig_width,K=f);w.splice(K,1)}}return w},histogramRotate:function(t){var e=new Image;e.src=t.toDataURL();for(var a=t,r=t.width,n=-45;n<=45;n+=5){var i=document.createElement("canvas"),o=i.getContext("2d",{willReadFrequently:!0});i.width=t.width,i.height=t.height,o.save(),o.translate(t.width/2,t.height/2),o.rotate(n*Math.PI/180),o.drawImage(e,-e.width/2,-e.width/2),o.restore();for(var h=o.getImageData(0,0,i.width,i.height),d=0,l=0;l<h.width;l++)for(var u=0;u<h.height;u++){var g=4*l+4*u*h.width;if(255!=h.data[g]&&0!=h.data[g+3]){d++;break}}o.putImageData(h,0,0),d<r&&(r=d,a=i)}return a}};return a},i=new Array,o=(new Array,new Array),h=!1,d="",l=function(t){o.push(t),h||u()},u=function(){o.length?(h=!0,o.shift()()):h=!1},g=function(t){for(var e=4e9,a="?",r=0;r<i.length;r++){var n=f(i[r].pattern,t);n<e&&(e=n,a=i[r].solution)}return a},c=function(t){for(var e=new Array,a=t.getContext("2d",{willReadFrequently:!0}).getImageData(0,0,t.width,t.height),r=0;r<a.width;r++)for(var n=0;n<a.height;n++){var i=4*r+4*n*a.width,o=Math.round(.34*a.data[i]+.5*a.data[i+1]+.16*a.data[i+2]);a.data[i+3]<255&&(o=255),e.push(o)}return e.join(".")},s=function(t){var e=document.createElement("canvas"),a=e.getContext("2d",{willReadFrequently:!0});return e.width=t.width,e.height=t.height,a.drawImage(t,0,0),e},f=function(t,e){for(var a=t.split("."),r=e.split("."),n=0,i=0;i<a.length;i++)n+=(a[i]-r[i])*(a[i]-r[i]);return Math.sqrt(n/a.length)},p=function(e,a,r,n,i,o,h){if(e<0||e>=o)return!1;var d=v(a,0),l=v(i,e);if(0==m(d,n))return!1;if(0==m(d,l))return!0;if(t.perceptive_colorspace){if(_(d,l)<=h)return!0}else if(m(d,l)<=h)return!0;return!1},w=function(t,e,a,r,n,i,o,h,d){return!!p(t,e,a,r,n,i,o)&&((void 0===h||!x(h,t))&&(d&&255==n[t]&&255==n[t+1]&&255==n[t+2]||(n[t]=r.r,n[t+1]=r.g,n[t+2]=r.b,n[t+3]=r.a),void 0!==h&&h.push(t),!0))},v=function(t,e){return{r:t[e],g:t[e+1],b:t[e+2]}},m=function(t,e){return Math.sqrt((Math.pow(t.r-e.r,2),Math.pow(t.g-e.g,2),Math.pow(t.g-e.g,2)/3))},_=function(t,e){var a=function(t){var e=t.r/255,a=t.g/255,r=t.b/255;return e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92,a=a>.04045?Math.pow((a+.055)/1.055,2.4):a/12.92,r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92,e*=100,a*=100,r*=100,{x:.4124*e+.3576*a+.1805*r,y:.2126*e+.7152*a+.0722*r,z:.0193*e+.1192*a+.9505*r}},r=function(t){var e=t.x/95.047,a=t.y/100,r=t.z/108.883;return e=e>.008856?Math.pow(e,1/3):7.787*e+16/116,a=a>.008856?Math.pow(a,1/3):7.787*a+16/116,r=r>.008856?Math.pow(r,1/3):7.787*r+16/116,{l:116*a-16,a:500*(e-a),b:200*(a-r)}};return function(t,e){var n=r(a(t)),i=r(a(e));return Math.sqrt(Math.pow(n.l-i.l,2)+Math.pow(n.a-i.a,2)+Math.pow(n.b-i.b,2))}(t,e)},x=function(t,e){for(var a=0;a<t.length;a++)if(t[a]===e)return!0;return!1},y=function(t,e,a){return{r:t,g:e,b:a,a:255}},b=function(){for(var t,e,a=Math.round(200*Math.random())+55;(t=Math.round(200*Math.random())+55)==a;);for(;(e=Math.round(200*Math.random())+55)==a||e==t;);return y(a,t,e)},C=function(t,e,a){var r=4*e+4*a*t.width;return{r:t.data[r+0],g:t.data[r+1],b:t.data[r+2]}},I=function(){function t(t,e){if(!n[t]){n[t]={};for(var a=0;a<t.length;a++)n[t][t.charAt(a)]=a}return n[t][e]}var e=String.fromCharCode,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$",n={},i={compressToBase64:function(t){if(null==t)return"";var e=i._compress(t,6,function(t){return a.charAt(t)});switch(e.length%4){default:case 0:return e;case 1:return e+"===";case 2:return e+"==";case 3:return e+"="}},decompressFromBase64:function(e){return null==e?"":""==e?null:i._decompress(e.length,32,function(r){return t(a,e.charAt(r))})},compressToUTF16:function(t){return null==t?"":i._compress(t,15,function(t){return e(t+32)})+" "},decompressFromUTF16:function(t){return null==t?"":""==t?null:i._decompress(t.length,16384,function(e){return t.charCodeAt(e)-32})},compressToUint8Array:function(t){for(var e=i.compress(t),a=new Uint8Array(2*e.length),r=0,n=e.length;n>r;r++){var o=e.charCodeAt(r);a[2*r]=o>>>8,a[2*r+1]=o%256}return a},decompressFromUint8Array:function(t){if(null===t||void 0===t)return i.decompress(t);for(var a=new Array(t.length/2),r=0,n=a.length;n>r;r++)a[r]=256*t[2*r]+t[2*r+1];var o=[];return a.forEach(function(t){o.push(e(t))}),i.decompress(o.join(""))},compressToEncodedURIComponent:function(t){return null==t?"":i._compress(t,6,function(t){return r.charAt(t)})},decompressFromEncodedURIComponent:function(e){return null==e?"":""==e?null:(e=e.replace(/ /g,"+"),i._decompress(e.length,32,function(a){return t(r,e.charAt(a))}))},compress:function(t){return i._compress(t,16,function(t){return e(t)})},_compress:function(t,e,a){if(null==t)return"";var r,n,i,o={},h={},d="",l="",u="",g=2,c=3,s=2,f=[],p=0,w=0;for(i=0;i<t.length;i+=1)if(d=t.charAt(i),Object.prototype.hasOwnProperty.call(o,d)||(o[d]=c++,h[d]=!0),l=u+d,Object.prototype.hasOwnProperty.call(o,l))u=l;else{if(Object.prototype.hasOwnProperty.call(h,u)){if(u.charCodeAt(0)<256){for(r=0;s>r;r++)p<<=1,w==e-1?(w=0,f.push(a(p)),p=0):w++;for(n=u.charCodeAt(0),r=0;8>r;r++)p=p<<1|1&n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n>>=1}else{for(n=1,r=0;s>r;r++)p=p<<1|n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n=0;for(n=u.charCodeAt(0),r=0;16>r;r++)p=p<<1|1&n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n>>=1}0==--g&&(g=Math.pow(2,s),s++),delete h[u]}else for(n=o[u],r=0;s>r;r++)p=p<<1|1&n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n>>=1;0==--g&&(g=Math.pow(2,s),s++),o[l]=c++,u=String(d)}if(""!==u){if(Object.prototype.hasOwnProperty.call(h,u)){if(u.charCodeAt(0)<256){for(r=0;s>r;r++)p<<=1,w==e-1?(w=0,f.push(a(p)),p=0):w++;for(n=u.charCodeAt(0),r=0;8>r;r++)p=p<<1|1&n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n>>=1}else{for(n=1,r=0;s>r;r++)p=p<<1|n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n=0;for(n=u.charCodeAt(0),r=0;16>r;r++)p=p<<1|1&n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n>>=1}0==--g&&(g=Math.pow(2,s),s++),delete h[u]}else for(n=o[u],r=0;s>r;r++)p=p<<1|1&n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n>>=1;0==--g&&(g=Math.pow(2,s),s++)}for(n=2,r=0;s>r;r++)p=p<<1|1&n,w==e-1?(w=0,f.push(a(p)),p=0):w++,n>>=1;for(;;){if(p<<=1,w==e-1){f.push(a(p));break}w++}return f.join("")},decompress:function(t){return null==t?"":""==t?null:i._decompress(t.length,32768,function(e){return t.charCodeAt(e)})},_decompress:function(t,a,r){var n,i,o,h,d,l,u,g=[],c=4,s=4,f=3,p="",w=[],v={val:r(0),position:a,index:1};for(n=0;3>n;n+=1)g[n]=n;for(o=0,d=Math.pow(2,2),l=1;l!=d;)h=v.val&v.position,v.position>>=1,0==v.position&&(v.position=a,v.val=r(v.index++)),o|=(h>0?1:0)*l,l<<=1;switch(o){case 0:for(o=0,d=Math.pow(2,8),l=1;l!=d;)h=v.val&v.position,v.position>>=1,0==v.position&&(v.position=a,v.val=r(v.index++)),o|=(h>0?1:0)*l,l<<=1;u=e(o);break;case 1:for(o=0,d=Math.pow(2,16),l=1;l!=d;)h=v.val&v.position,v.position>>=1,0==v.position&&(v.position=a,v.val=r(v.index++)),o|=(h>0?1:0)*l,l<<=1;u=e(o);break;case 2:return""}for(g[3]=u,i=u,w.push(u);;){if(v.index>t)return"";for(o=0,d=Math.pow(2,f),l=1;l!=d;)h=v.val&v.position,v.position>>=1,0==v.position&&(v.position=a,v.val=r(v.index++)),o|=(h>0?1:0)*l,l<<=1;switch(u=o){case 0:for(o=0,d=Math.pow(2,8),l=1;l!=d;)h=v.val&v.position,v.position>>=1,0==v.position&&(v.position=a,v.val=r(v.index++)),o|=(h>0?1:0)*l,l<<=1;g[s++]=e(o),u=s-1,c--;break;case 1:for(o=0,d=Math.pow(2,16),l=1;l!=d;)h=v.val&v.position,v.position>>=1,0==v.position&&(v.position=a,v.val=r(v.index++)),o|=(h>0?1:0)*l,l<<=1;g[s++]=e(o),u=s-1,c--;break;case 2:return w.join("")}if(0==c&&(c=Math.pow(2,f),f++),g[u])p=g[u];else{if(u!==s)return null;p=i+i.charAt(0)}w.push(p),g[s++]=i+p.charAt(0),i=p,0==--c&&(c=Math.pow(2,f),f++)}}};return i}();return"function"==typeof define&&define.amd?define(function(){return I}):"undefined"!=typeof module&&null!=module&&(module.exports=I),t.model_file.length?r.loadModel(t.model_file):t.model_string.length&&r.loadModelString(t.model_string),r};
